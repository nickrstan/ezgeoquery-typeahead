!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("EzGeoTypeahead",[],t):"object"==typeof exports?exports.EzGeoTypeahead=t():e.EzGeoTypeahead=t()}(window,function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),n(1);var r=n(6);t.init=function(e){return new r.InitTypeahead(e)}},function(e,t,n){var r=n(2);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(4)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(3)(!1)).push([e.i,"/******** ?Typeahead Css ********/\n.twitter-typeahead {\n    width: 100%;\n}\n\n.tt-highlight {\n    font-weight: 600;\n}\n\n.tt-hint {\n    color: #999\n}\n\n.tt-menu {\n    width: 100%;\n    margin: 12px 0;\n    padding: 8px 0;\n    background-color: #fff;\n    border: 1px solid rgba(0, 0, 0, 0.2);\n    border-radius: .3rem;\n    box-shadow: 0 5px 10px rgba(0,0,0,.2);\n}\n\n.tt-suggestion {\n    padding: 3px 20px;\n    font-size: 18px;\n    line-height: 24px;\n}\n\n.tt-suggestion:hover {\n    cursor: pointer;\n    color: #fff;\n    background-color: #007bff;\n}\n\n.tt-suggestion.tt-cursor {\n    color: #fff;\n    background-color: #007bff;\n    \n}\n\n.tt-suggestion p {\n    margin: 0;\n}\n",""])},function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=function(e){return"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(e))))+" */"}(r),i=r.sources.map(function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"});return[n].concat(i).concat([o]).join("\n")}return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];"number"==typeof i&&(r[i]=!0)}for(o=0;o<e.length;o++){var s=e[o];"number"==typeof s[0]&&r[s[0]]||(n&&!s[2]?s[2]=n:n&&(s[2]="("+s[2]+") and ("+n+")"),t.push(s))}},t}},function(e,t,n){var r={},o=function(e){var t;return function(){return void 0===t&&(t=e.apply(this,arguments)),t}}(function(){return window&&document&&document.all&&!window.atob}),i=function(e){var t={};return function(e,n){if("function"==typeof e)return e();if(void 0===t[e]){var r=function(e,t){return t?t.querySelector(e):document.querySelector(e)}.call(this,e,n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[e]=r}return t[e]}}(),s=null,a=0,u=[],p=n(5);function c(e,t){for(var n=0;n<e.length;n++){var o=e[n],i=r[o.id];if(i){i.refs++;for(var s=0;s<i.parts.length;s++)i.parts[s](o.parts[s]);for(;s<o.parts.length;s++)i.parts.push(g(o.parts[s],t))}else{var a=[];for(s=0;s<o.parts.length;s++)a.push(g(o.parts[s],t));r[o.id]={id:o.id,refs:1,parts:a}}}}function l(e,t){for(var n=[],r={},o=0;o<e.length;o++){var i=e[o],s=t.base?i[0]+t.base:i[0],a={css:i[1],media:i[2],sourceMap:i[3]};r[s]?r[s].parts.push(a):n.push(r[s]={id:s,parts:[a]})}return n}function h(e,t){var n=i(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=u[u.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),u.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=i(e.insertAt.before,n);n.insertBefore(t,o)}}function f(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=u.indexOf(e);t>=0&&u.splice(t,1)}function d(e){var t=document.createElement("style");if(void 0===e.attrs.type&&(e.attrs.type="text/css"),void 0===e.attrs.nonce){var r=function(){0;return n.nc}();r&&(e.attrs.nonce=r)}return y(t,e.attrs),h(e,t),t}function y(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function g(e,t){var n,r,o,i;if(t.transform&&e.css){if(!(i=t.transform(e.css)))return function(){};e.css=i}if(t.singleton){var u=a++;n=s||(s=d(t)),r=_.bind(null,n,u,!1),o=_.bind(null,n,u,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",y(t,e.attrs),h(e,t),t}(t),r=function(e,t,n){var r=n.css,o=n.sourceMap,i=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||i)&&(r=p(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var s=new Blob([r],{type:"text/css"}),a=e.href;e.href=URL.createObjectURL(s),a&&URL.revokeObjectURL(a)}.bind(null,n,t),o=function(){f(n),n.href&&URL.revokeObjectURL(n.href)}):(n=d(t),r=function(e,t){var n=t.css,r=t.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){f(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=o()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=l(e,t);return c(n,t),function(e){for(var o=[],i=0;i<n.length;i++){var s=n[i];(a=r[s.id]).refs--,o.push(a)}e&&c(l(e,t),t);for(i=0;i<o.length;i++){var a;if(0===(a=o[i]).refs){for(var u=0;u<a.parts.length;u++)a.parts[u]();delete r[a.id]}}}};var v=function(){var e=[];return function(t,n){return e[t]=n,e.filter(Boolean).join("\n")}}();function _(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=v(t,o);else{var i=document.createTextNode(o),s=e.childNodes;s[t]&&e.removeChild(s[t]),s.length?e.insertBefore(i,s[t]):e.appendChild(i)}}},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var o,i=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?e:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?n+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0});var o={minLength:3,highlight:!0,hint:!1,autoselect:!0,classNames:null,rateLimitBy:"throttle",rateLimitWait:200,limit:5,cache:!0,ttl:7776e6,prefetch:!0,selectFirstOnClose:!0,setPreviousValueOnEmpty:!1},i=function(){function e(e,t,n){this.apikey=e,this.input=t,this.options=n,this._apiurl="https://ezgeoquery.us/api",this._prefetchUrl="https://ezgeoquery.us/api/popular",this._urlDirectory="/query/",this._resultsName="geodata",this._options=o,this._currentValue={},this._currentSuggestions=[],this._typeaheadOptions={},this._ezGeoOptions={},this.activated=!1,this._apikey=e,this._input=t,n&&(this._options=r({},this._options,n)),this._typeaheadOptions={minLength:this._options.minLength,hint:this._options.hint,highlight:this._options.highlight,autoselect:this._options.autoselect,classNames:this._options.classNames},this._ezGeoOptions={selectFirstOnClose:this._options.selectFirstOnClose,setPreviousValueOnEmpty:this._options.setPreviousValueOnEmpty},this._setGeoData(),this._startTypeahead()}return Object.defineProperty(e.prototype,"resultsName",{get:function(){return this._resultsName},set:function(e){this._resultsName=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"typeahead",{get:function(){return this._typeahead},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"geodata",{get:function(){return this._geodata},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"currentValue",{get:function(){return this._currentValue},set:function(e){this._currentValue=e,this._typeahead.typeahead("val",this._inputDisplay(this.currentValue)),this._triggerValueChangeEvent()},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"currentSuggestions",{get:function(){return this._currentSuggestions},set:function(e){this._currentSuggestions=e},enumerable:!0,configurable:!0}),e.prototype._updateInputValue=function(e){this._typeahead.typeahead("val",this._inputDisplay(e))},e.prototype._inputDisplay=function(e){return e.city+", "+e.state+", "+e.zip_code},e.prototype._prepare=function(e,t){return t.url=t.url+this._urlDirectory+e,t.headers={"x-authorization":this._apikey},t},e.prototype._prefetch=function(){var e=this;return this._options.prefetch?{url:this._prefetchUrl,cache:this._options.cache,ttl:this._options.ttl,cacheKey:"ezgeoquery_popular",prepare:function(t){return t.url=t.url,t.headers={"x-authorization":e._apikey},t}}:null},e.prototype._setGeoData=function(){var e=this;this._geodata=new Bloodhound({datumTokenizer:function(e){return[e.zip_code,e.state,e.city]},queryTokenizer:Bloodhound.tokenizers.nonword,local:[],identify:function(e){return e.zip_code},sufficient:2,prefetch:this._prefetch(),remote:{url:this._apiurl,prepare:function(t,n){return e._prepare(t,n)},rateLimitBy:this._options.rateLimitBy,rateLimitWait:this._options.rateLimitWait,limit:this._options.limit,transport:function(t,n,r){if(e._preventQueryOnFocus(t))return!1;$.ajax(t).done(function(e){return n(e)}).fail(function(e){if(e.responseJSON&&(e.responseJSON.error||e.responseJSON.code)){switch(e.responseJSON.code?e.responseJSON.code?e.responseJSON.code:"hippty-hop":e.responseJSON.error.code?e.responseJSON.error.code:"hippty-hop"){case"quota_monthly":console.error("Ez Geo Query: You have hit your monthly Ez Geo Query api limit. Head over to https://www.ezgeoquery.us to increase your limit");break;case"401":console.error("Ez Geo Query: No Api key");break;case"invalid_zip":console.error("Ez Geo Query: Invalid zip code");break;default:console.error("Ez Geo Query: Something bad happened")}}})}}})},e.prototype._startTypeahead=function(){var e=this;this._typeahead=this._input.typeahead(this._typeaheadOptions,{name:this.resultsName,source:this._geodata,display:function(t){return e._inputDisplay(t)}}),this._watchEvents()},e.prototype._watchEvents=function(){this._active(),this._select(),this._render(),this._ezGeoOptions.selectFirstOnClose&&this._selectFirst(),this._ezGeoOptions.setPreviousValueOnEmpty?this._setPreviousValue():this._defaultPreviousInput()},e.prototype._active=function(){var e=this;this._typeahead.on("typeahead:active",function(t){e.activated||(e.activated=!0)})},e.prototype._select=function(){var e=this;this._typeahead.on("typeahead:select",function(t,n){e._currentValue=n,e._triggerValueChangeEvent(),e.currentSuggestions=[]})},e.prototype._render=function(){var e=this;this._typeahead.on("typeahead:render",function(t,n,r,o){e.currentSuggestions=n})},e.prototype._preventQueryOnFocus=function(e){if(this._currentValue){var t=e.url,n=this._apiurl+this._urlDirectory,r=t.replace(n,"");return this._inputDisplay(this.currentValue)==r}return!1},e.prototype._defaultPreviousInput=function(){var e=this;this._typeahead.bind("typeahead:change",function(t){""==e._typeahead.typeahead("val")&&(e._currentValue={})})},e.prototype._triggerValueChangeEvent=function(){this._typeahead.trigger("typeahead:valueUpdated",this.currentValue)},e.prototype._selectFirst=function(){var e=this;this._typeahead.on("typeahead:close",function(){if(e.currentSuggestions.length>0){var t=e.currentSuggestions[0];0!==Object.keys(e.currentValue).length&&e.currentValue.zip_code==t.zip_code?e._updateInputValue(e.currentValue):(e.currentValue=t,e.currentSuggestions=[])}})},e.prototype._setPreviousValue=function(){var e=this;this._typeahead.bind("typeahead:close",function(t){if(0!==Object.keys(e.currentValue).length){var n=e._typeahead.typeahead("val"),r=e._inputDisplay(e.currentValue);0!=e.currentSuggestions.length&&n===r||e._updateInputValue(e.currentValue)}})},e}(),s=function(){function e(e){this.apikey=e,this.apikey||console.error("Ez Geo Query: We need your api key. Get one here: https://www.ezgeoquery.us")}return e.prototype.make=function(e,t){return"string"==typeof e&&(e=jQuery(e)),new i(this.apikey,e,t)},e}();t.InitTypeahead=s}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,